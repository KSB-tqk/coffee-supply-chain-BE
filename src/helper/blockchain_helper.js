import Web3 from "web3";
import Provider from "@truffle/hdwallet-provider";
import fs from "fs";
import { ethers } from "ethers";
import keythereum from "keythereum";
const contractJson = fs.readFileSync(
  "blockchain/contracts/TrackingModelAbi.json"
);

var SmartContractAddress = "0x04cCBE65574b5311b60472FE1b88d289166434a7";
var SmartContractABI = JSON.parse(contractJson);
var address = "0x12BEb1f1b039058EA53826433c2901561E49E594";
var privatekey =
  "18556d29e398bb540c5ab4a27af51b94d0a22f853b098910bf13d198ff2d48a4";
var rpcurl =
  "https://polygon-mumbai.g.alchemy.com/v2/T-IiG1fGDQ0aOjasn-vtpMYpOqb_9AYr";

export async function sendData(logId) {
  console.log("in function");
  var provider = new Provider(privatekey, rpcurl);
  var web3 = new Web3(provider);
  var myContract = new web3.eth.Contract(
    SmartContractABI,
    SmartContractAddress
  );

  const result = await myContract.methods
    .addTrackingBlock(logId.toString(), "UpdateContentNe", address)
    .send({ from: address });

  console.log("Result: ", result);

  var newvalue = await myContract.methods
    .getTrackingBlock("testProductId")
    .call();
  console.log("newvalue", newvalue);

  console.log("done with all things");
}

//contract = 0x4c5a4eee23ad871a77d36e04ce63721a8c7eb25b;

//contract=0xf0E4f7313fbf9E7538a48441e1Ce6d4b06c709B9

export async function unlockAccount() {
  main();
}

let provider = new ethers.providers.JsonRpcProvider("http://127.0.0.1:8545");

async function main() {
  var datadir =
    "/Users/khanhtran/ProjectFlutter/geth-PoA-private-blockchain/node1/data/";
  const password = "myhao12102001";

  var keyObject = keythereum.importFromFile(address, datadir);
  var privateKey = keythereum.recover(password, keyObject);
  console.log(privateKey.toString("hex"));

  let wallet = new ethers.Wallet(privateKey, provider);
  const myContract = new ethers.Contract(
    SmartContractAddress,
    SmartContractABI,
    provider
  );

  let tx = await myContract
    .connect(wallet)
    .addTrackingBlock("Something", "UpdateContentNe", address);
  await tx.wait();
  console.log(tx);
}

export async function getTransactionReceipt() {
  var datadir =
    "/Users/khanhtran/ProjectFlutter/geth-PoA-private-blockchain/node1/data/";
  const password = "myhao12102001";

  var keyObject = keythereum.importFromFile(address, datadir);
  var privateKey = keythereum.recover(password, keyObject);
  console.log(privateKey.toString("hex"));

  // WebSocket IP
  const wsAddress = "http://127.0.0.1:8545";

  var provider = new Provider(privatekey, wsAddress);

  // Creating a Provider Instance (to query blockchain)
  const web3 = new Web3(provider);

  const transaction = await web3.eth.getTransaction(
    "0xa86f485c8053ed7047ab76e5f1b825ea769b4cc1fc11c10dcc0495e53b63d5ee"
  );

  console.log(transaction);

  const transactionReceipt = await web3.eth.getTransactionReceipt(
    "0xa86f485c8053ed7047ab76e5f1b825ea769b4cc1fc11c10dcc0495e53b63d5ee"
  );

  console.log(transactionReceipt);

  const blockInfo = await web3.eth.getBlock(transactionReceipt.blockNumber);

  console.log(blockInfo);

  const inputData = web3.utils.hexToAscii(transaction.input);

  console.log(inputData);
}

export function web3Deploy() {
  var datadir =
    "/Users/khanhtran/ProjectFlutter/geth-PoA-private-blockchain/node1/data/";
  const password = "myhao12102001";

  var keyObject = keythereum.importFromFile(address, datadir);
  var privateKey = keythereum.recover(password, keyObject);
  console.log(privateKey.toString("hex"));

  // WebSocket IP
  const wsAddress = "http://127.0.0.1:8545";

  var provider = new Provider(privatekey, wsAddress);

  // Creating a Provider Instance (to query blockchain)
  const web3 = new Web3(provider);

  var trackingmodelContract = new web3.eth.Contract([
    { inputs: [], stateMutability: "nonpayable", type: "constructor" },
    {
      inputs: [
        { internalType: "string", name: "_productId", type: "string" },
        { internalType: "string", name: "_contractContentId", type: "string" },
        { internalType: "address", name: "_creatorAddress", type: "address" },
      ],
      name: "addTrackingBlock",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [{ internalType: "string", name: "_productId", type: "string" }],
      name: "getTrackingBlock",
      outputs: [
        {
          components: [
            {
              internalType: "address",
              name: "trackingCreator",
              type: "address",
            },
            {
              internalType: "string",
              name: "contractContentId",
              type: "string",
            },
            { internalType: "string", name: "productId", type: "string" },
          ],
          internalType: "struct TrackingModel.tracking",
          name: "",
          type: "tuple",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "owner",
      outputs: [{ internalType: "address", name: "", type: "address" }],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
      name: "trackingChain",
      outputs: [{ internalType: "string", name: "", type: "string" }],
      stateMutability: "view",
      type: "function",
    },
  ]);
  var trackingmodel = trackingmodelContract
    .deploy({
      data: "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c25806100606000396000f3fe608060405234801561001057600080fd5b506004361061004b5760003560e01c8062bff86e146100505780632d06c39c146100805780638a8ed2851461009c5780638da5cb5b146100cc575b600080fd5b61006a6004803603810190610065919061047c565b6100ea565b6040516100779190610539565b60405180910390f35b61009a600480360381019061009591906106ee565b610196565b005b6100b660048036038101906100b19190610779565b610225565b6040516100c39190610872565b60405180910390f35b6100d46103d7565b6040516100e191906108a3565b60405180910390f35b600181815481106100fa57600080fd5b906000526020600020016000915090508054610115906108ed565b80601f0160208091040260200160405190810160405280929190818152602001828054610141906108ed565b801561018e5780601f106101635761010080835404028352916020019161018e565b820191906000526020600020905b81548152906001019060200180831161017157829003601f168201915b505050505081565b60006002846040516101a8919061095a565b90815260200160405180910390209050828160010190816101c99190610b1d565b50818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508381600201908161021e9190610b1d565b5050505050565b61022d6103fb565b60028260405161023d919061095a565b90815260200160405180910390206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546102bc906108ed565b80601f01602080910402602001604051908101604052809291908181526020018280546102e8906108ed565b80156103355780601f1061030a57610100808354040283529160200191610335565b820191906000526020600020905b81548152906001019060200180831161031857829003601f168201915b5050505050815260200160028201805461034e906108ed565b80601f016020809104026020016040519081016040528092919081815260200182805461037a906108ed565b80156103c75780601f1061039c576101008083540402835291602001916103c7565b820191906000526020600020905b8154815290600101906020018083116103aa57829003601f168201915b5050505050815250509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61045981610446565b811461046457600080fd5b50565b60008135905061047681610450565b92915050565b6000602082840312156104925761049161043c565b5b60006104a084828501610467565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104e35780820151818401526020810190506104c8565b60008484015250505050565b6000601f19601f8301169050919050565b600061050b826104a9565b61051581856104b4565b93506105258185602086016104c5565b61052e816104ef565b840191505092915050565b600060208201905081810360008301526105538184610500565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61059d826104ef565b810181811067ffffffffffffffff821117156105bc576105bb610565565b5b80604052505050565b60006105cf610432565b90506105db8282610594565b919050565b600067ffffffffffffffff8211156105fb576105fa610565565b5b610604826104ef565b9050602081019050919050565b82818337600083830152505050565b600061063361062e846105e0565b6105c5565b90508281526020810184848401111561064f5761064e610560565b5b61065a848285610611565b509392505050565b600082601f8301126106775761067661055b565b5b8135610687848260208601610620565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106bb82610690565b9050919050565b6106cb816106b0565b81146106d657600080fd5b50565b6000813590506106e8816106c2565b92915050565b6000806000606084860312156107075761070661043c565b5b600084013567ffffffffffffffff81111561072557610724610441565b5b61073186828701610662565b935050602084013567ffffffffffffffff81111561075257610751610441565b5b61075e86828701610662565b925050604061076f868287016106d9565b9150509250925092565b60006020828403121561078f5761078e61043c565b5b600082013567ffffffffffffffff8111156107ad576107ac610441565b5b6107b984828501610662565b91505092915050565b6107cb816106b0565b82525050565b600082825260208201905092915050565b60006107ed826104a9565b6107f781856107d1565b93506108078185602086016104c5565b610810816104ef565b840191505092915050565b600060608301600083015161083360008601826107c2565b506020830151848203602086015261084b82826107e2565b9150506040830151848203604086015261086582826107e2565b9150508091505092915050565b6000602082019050818103600083015261088c818461081b565b905092915050565b61089d816106b0565b82525050565b60006020820190506108b86000830184610894565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061090557607f821691505b602082108103610918576109176108be565b5b50919050565b600081905092915050565b6000610934826104a9565b61093e818561091e565b935061094e8185602086016104c5565b80840191505092915050565b60006109668284610929565b915081905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026109d37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610996565b6109dd8683610996565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610a1a610a15610a1084610446565b6109f5565b610446565b9050919050565b6000819050919050565b610a34836109ff565b610a48610a4082610a21565b8484546109a3565b825550505050565b600090565b610a5d610a50565b610a68818484610a2b565b505050565b5b81811015610a8c57610a81600082610a55565b600181019050610a6e565b5050565b601f821115610ad157610aa281610971565b610aab84610986565b81016020851015610aba578190505b610ace610ac685610986565b830182610a6d565b50505b505050565b600082821c905092915050565b6000610af460001984600802610ad6565b1980831691505092915050565b6000610b0d8383610ae3565b9150826002028217905092915050565b610b26826104a9565b67ffffffffffffffff811115610b3f57610b3e610565565b5b610b4982546108ed565b610b54828285610a90565b600060209050601f831160018114610b875760008415610b75578287015190505b610b7f8582610b01565b865550610be7565b601f198416610b9586610971565b60005b82811015610bbd57848901518255600182019150602085019450602081019050610b98565b86831015610bda5784890151610bd6601f891682610ae3565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220675f69995abf1870bef0c5d4cade2079ec5ab42963dd193afc3b03ffdc48797564736f6c63430008120033",
      arguments: [],
    })
    .send({
      from: "0x12BEb1f1b039058EA53826433c2901561E49E594",
      gas: "4700000",
    });
}
